{"version":3,"sources":["const/actionTypes.js","const/systemStates.js","beepController.js","store.js","reducers/rootReducer.js","actions/tickAction.js","components/Timer.js","actions/resetAction.js","actions/startStopClickedAction.js","actions/updateBreakLengthAction.js","actions/updateSessionLengthAction.js","components/ControlButton.js","components/Arrow.js","components/Editor.js","components/ControlPanel.js","components/TimerStatus.js","App.js","serviceWorker.js","index.js"],"names":["START_STOP_CLICKED","TICK","RESET","UPDATE_SESSION_LENGTH","UPDATE_BREAK_LENGTH","IDLE","SESSION","SESSION_PAUSE","BREAK","BREAK_PAUSE","soundElement","document","getElementById","defaultState","systemState","SystemStates","sessionLength","breakLength","currentTime","store","Redux","state","arguments","length","undefined","action","newState","Object","assign","type","ActionTypes","pause","parseInt","value","window","__REDUX_DEVTOOLS_EXTENSION__","tickAction","timerStyle","color","fontSize","fontWeight","fontFamily","margin","marginBottom","textAlign","finalTimerStyle","objectSpread","Timer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","interval","nextProps","_this2","clearInterval","setInterval","tick","minutes","Math","floor","seconds","timeString","react_default","a","createElement","id","style","React","Component","connect","play","dispatch","resetAction","startStopClickedAction","updateBreakLengthAction","updateSessionLengthAction","NORMAL_BACKGROUND","MOUSE_HOVER_BACKGROUND","TEXT_STYLE","marginTop","ControlButton","onMouseEnter","e","setState","background","onMouseLeave","gridRow","gridColumn","borderRadius","cursor","onClick","click","title","Arrow","width","height","borderTop","SIZE","borderBottom","borderRight","orientation","borderLeft","Editor","increaseValue","updateValue","decreaseValue","display","gridTemplateRows","gridTemplateColumns","alignItems","justifyItems","whiteSpace","split","map","w","charAt","toUpperCase","slice","join","Arrow_Arrow","panelStyle","gridColumnGap","gridRowGap","ControlPanel","Editor_Editor","updateSessionLength","updateBreakLength","ControlButton_ControlButton","startButtonTitle","startStopClick","resetClick","statusStyle","finalStatusStyle","TimerStatus","label","headerStyle","App","es","components_Timer","components_TimerStatus","components_ControlPanel","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b38e611e.chunk.js","sourcesContent":["export const START_STOP_CLICKED = 'START_STOP_CLICKED';\r\n\r\nexport const TICK = 'TICK';\r\n\r\nexport const RESET = 'RESET';\r\n\r\nexport const UPDATE_SESSION_LENGTH = 'UPDATE_SESSION_LENGTH';\r\n\r\nexport const UPDATE_BREAK_LENGTH = 'UPDATE_BREAK_LENGTH';\r\n\r\n","export const IDLE = 'IDLE';\r\nexport const SESSION = 'SESSION';\r\nexport const SESSION_PAUSE = 'SESSION_PAUSE';\r\nexport const BREAK = 'BREAK';\r\nexport const BREAK_PAUSE = 'BREAK_PAUSE';","const soundElement = document.getElementById('beep');\r\n\r\nexport function PlayBeep(){\r\n    soundElement.play();\r\n}\r\n\r\nexport function StopBeep(){\r\n    soundElement.pause();\r\n    soundElement.currentTime = 0;\r\n}\r\n","import * as Redux from 'redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\nimport * as SystemStates from './const/systemStates';\r\n\r\n\r\nexport const defaultState = {\r\n    systemState: SystemStates.IDLE,\r\n    sessionLength: 25 * 60,\r\n    breakLength: 5 * 60,\r\n    currentTime: 25 * 60\r\n};\r\n\r\nexport const store = Redux.createStore(rootReducer, defaultState, Redux.compose(window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));","import {defaultState} from '../store';\r\nimport * as ActionTypes from '../const/actionTypes';\r\nimport * as SystemStates from '../const/systemStates';\r\nimport { StopBeep } from '../beepController';\r\n\r\n\r\nexport default function rootReducer(state = defaultState, action){\r\n    let newState = Object.assign({}, state);\r\n\r\n    switch(action.type){\r\n        case ActionTypes.START_STOP_CLICKED:\r\n            switch(newState.systemState){\r\n                case SystemStates.IDLE:\r\n                    newState.systemState = SystemStates.SESSION;\r\n                    break;\r\n                case SystemStates.SESSION:\r\n                    newState.systemState = SystemStates.SESSION_PAUSE;\r\n                    break;\r\n                case SystemStates.SESSION_PAUSE:\r\n                    newState.systemState = SystemStates.SESSION;\r\n                    break;                \r\n                case SystemStates.BREAK:\r\n                    newState.systemState = SystemStates.BREAK_PAUSE;\r\n                    break;\r\n                case SystemStates.BREAK_PAUSE:\r\n                    newState.systemState = SystemStates.BREAK;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return newState;\r\n\r\n        case ActionTypes.RESET:\r\n            StopBeep();\r\n            return defaultState;\r\n\r\n        case ActionTypes.UPDATE_SESSION_LENGTH:\r\n            if (newState.systemState !== SystemStates.SESSION && newState.systemState !== SystemStates.BREAK){\r\n                newState.sessionLength += parseInt(action.value);\r\n                if (newState.systemState === SystemStates.IDLE || newState.systemState === SystemStates.SESSION_PAUSE){\r\n                    newState.currentTime = newState.sessionLength;\r\n                }\r\n            }\r\n            return newState;\r\n\r\n        case ActionTypes.UPDATE_BREAK_LENGTH:\r\n            if (newState.systemState !== SystemStates.SESSION && newState.systemState !== SystemStates.BREAK){\r\n                newState.breakLength += parseInt(action.value);\r\n                if (newState.systemState === SystemStates.BREAK_PAUSE){\r\n                    newState.currentTime = newState.breakLength;\r\n                }\r\n            }\r\n            return newState;\r\n\r\n        case ActionTypes.TICK:\r\n            if (newState.currentTime === 0){\r\n                if (newState.systemState === SystemStates.SESSION){\r\n                    newState.systemState = SystemStates.BREAK;\r\n                    newState.currentTime = newState.breakLength;\r\n                }\r\n                else if (newState.systemState === SystemStates.BREAK){\r\n                    newState.systemState = SystemStates.SESSION;\r\n                    newState.currentTime = newState.sessionLength;\r\n                }\r\n            }\r\n            else{\r\n                newState.currentTime --;\r\n            }\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from '../const/actionTypes';\r\n\r\nexport const tickAction = {type: ActionTypes.TICK};","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nimport * as SystemStates from '../const/systemStates';\r\nimport {tickAction} from '../actions/tickAction';\r\nimport { PlayBeep } from '../beepController';\r\n\r\nconst timerStyle = {\r\n    color: '#FFFFFF',\r\n    fontSize: '80px',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Arial',\r\n    margin: 'auto',\r\n    marginBottom: '0px',\r\n    textAlign: 'center' \r\n};\r\n\r\nconst finalTimerStyle = {...timerStyle, color: '#FF0000'};\r\n\r\n\r\nclass Timer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.interval = 0;\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.systemState === this.props.systemState) return;\r\n\r\n        if (nextProps.systemState === SystemStates.IDLE || nextProps.systemState === SystemStates.SESSION_PAUSE || nextProps.systemState === SystemStates.BREAK_PAUSE){\r\n            clearInterval(this.interval);\r\n        }else{\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(() => {\r\n                this.props.tick();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let minutes = Math.floor(this.props.currentTime / 60);\r\n        let seconds = this.props.currentTime - minutes*60;\r\n        let timeString = (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n        return <div id='time-left' style={this.props.currentTime >= 60 ? timerStyle : finalTimerStyle}>{timeString}</div>;\r\n    }\r\n}\r\n\r\nTimer.propTypes = {\r\n    currentTime: PropTypes.number.isRequired,\r\n    systemState: PropTypes.oneOf([SystemStates.IDLE, SystemStates.SESSION, SystemStates.SESSION_PAUSE, SystemStates.BREAK, SystemStates.BREAK_PAUSE]),\r\n    tick: PropTypes.func.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state){\r\n    if (state.currentTime === 0){\r\n        PlayBeep();\r\n    }\r\n    return {\r\n        currentTime: state.currentTime,\r\n        systemState: state.systemState\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        tick: () => dispatch(tickAction)\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import * as ActionTypes from '../const/actionTypes';\r\n\r\nexport const resetAction = {type: ActionTypes.RESET};","import * as ActionTypes from '../const/actionTypes';\r\n\r\nexport const startStopClickedAction = {type: ActionTypes.START_STOP_CLICKED};","import * as ActionTypes from '../const/actionTypes';\r\n\r\nexport const updateBreakLengthAction = value => ({\r\n    type: ActionTypes.UPDATE_BREAK_LENGTH,\r\n    value: value\r\n});","import * as ActionTypes from '../const/actionTypes';\r\n\r\nexport const updateSessionLengthAction = value => ({\r\n    type: ActionTypes.UPDATE_SESSION_LENGTH,\r\n    value: value\r\n});","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NORMAL_BACKGROUND = '#C13100';\r\nconst MOUSE_HOVER_BACKGROUND = '#D64615';\r\nconst TEXT_STYLE = {\r\n    color: '#FFFFFF',\r\n    fontSize: '25px',\r\n    margin: 'auto',\r\n    marginTop: '5px',\r\n    textAlign: 'center'\r\n};\r\n\r\nexport default class ControlButton extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {background: NORMAL_BACKGROUND};\r\n    }\r\n\r\n    onMouseEnter = e => this.setState({background: MOUSE_HOVER_BACKGROUND});\r\n\r\n    onMouseLeave = e => this.setState({background: NORMAL_BACKGROUND});\r\n\r\n    render(){\r\n        return <div id={this.props.id} style={{\r\n            background: this.state.background,\r\n            gridRow: this.props.gridRow,\r\n            gridColumn: this.props.gridColumn,\r\n            borderRadius: '7px',\r\n            cursor: 'pointer'\r\n        }} onClick={this.props.click} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\r\n            <div style={TEXT_STYLE}>{this.props.title}</div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nControlButton.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    click: PropTypes.func.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    gridRow: PropTypes.string.isRequired,\r\n    gridColumn: PropTypes.string.isRequired\r\n};\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NORMAL_BACKGROUND = '#FF9A2E';\r\nconst MOUSE_HOVER_BACKGROUND = '#FFBF72';\r\nconst SIZE = 20;\r\n\r\n\r\nexport default class Arrow extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { background: NORMAL_BACKGROUND };\r\n    }\r\n\r\n    onMouseEnter = e => this.setState({background: MOUSE_HOVER_BACKGROUND});\r\n\r\n    onMouseLeave = e => this.setState({background: NORMAL_BACKGROUND});\r\n\r\n    render(){\r\n        return <div id={this.props.id} style={{\r\n            width: 0,\r\n            height: 0,\r\n            cursor: 'pointer',\r\n            borderTop: SIZE + 'px solid transparent',\r\n            borderBottom: SIZE + 'px solid transparent',\r\n            borderRight: (this.props.orientation === 'left' ? SIZE : 0) + 'px solid ' + this.state.background,\r\n            borderLeft: (this.props.orientation === 'right' ? SIZE : 0) + 'px solid ' + this.state.background,\r\n            gridRow: this.props.gridRow,\r\n            gridColumn: this.props.gridColumn\r\n        }} onClick={this.props.click} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\r\n        </div>;\r\n    }\r\n}\r\n\r\nArrow.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    click: PropTypes.func.isRequired,\r\n    gridRow: PropTypes.string.isRequired,\r\n    gridColumn: PropTypes.string.isRequired,\r\n    orientation: PropTypes.string.isRequired\r\n};\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Arrow from './Arrow';\r\n\r\n\r\nexport default class Editor extends React.Component{\r\n    increaseValue = () => {\r\n        if (this.props.value < 60 * 60){\r\n            this.props.updateValue(60);\r\n        }\r\n    }\r\n    decreaseValue = () => {\r\n        if (this.props.value > 60){\r\n            this.props.updateValue(-60);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return <div id={this.props.id} style={{\r\n            gridRow: this.props.gridRow,\r\n            gridColumn: this.props.gridColumn,\r\n            margin: 'auto',\r\n            textAlign: 'center'\r\n        }}>\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateRows: '25px 50px',\r\n                gridTemplateColumns: '1fr 2fr 1fr',\r\n                alignItems: 'center',\r\n                justifyItems: 'center'\r\n            }}>\r\n                <span style={{\r\n                    gridRow: '1',\r\n                    gridColumn: '2',\r\n                    color: '#FFFFFF',\r\n                    fontFamily: 'Arial',\r\n                    fontSize: '20px',\r\n                    whiteSpace: 'nowrap'\r\n                }} id={this.props.id + '-label'}>{phraseToCapital(this.props.id + ' length')}</span>\r\n                <Arrow gridRow='2' gridColumn='1' orientation='left' id={this.props.id + '-decrement'} click={this.decreaseValue}></Arrow>\r\n                <span style={{\r\n                    gridRow: '2',\r\n                    gridColumn: '2',\r\n                    color: '#FFFFFF',\r\n                    fontFamily: 'Arial',\r\n                    fontSize: '20px'\r\n                }} id={this.props.id + '-length'}>{this.props.value / 60}</span>\r\n                <Arrow gridRow='2' gridColumn='3' orientation='right' id={this.props.id + '-increment'} click={this.increaseValue}></Arrow>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        \r\n    }\r\n}\r\n\r\nEditor.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    gridRow: PropTypes.string.isRequired,\r\n    gridColumn: PropTypes.string.isRequired,\r\n    updateValue: PropTypes.func.isRequired,\r\n    value: PropTypes.number.isRequired\r\n};\r\n\r\n\r\nfunction phraseToCapital(phrase){\r\n    return phrase.split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ');\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {resetAction} from '../actions/resetAction';\r\nimport {startStopClickedAction} from '../actions/startStopClickedAction';\r\nimport {updateBreakLengthAction} from '../actions/updateBreakLengthAction';\r\nimport {updateSessionLengthAction} from '../actions/updateSessionLengthAction';\r\nimport * as SystemStates from '../const/systemStates';\r\nimport ControlButton from './ControlButton';\r\nimport Editor from './Editor';\r\n\r\nconst panelStyle = {\r\n    width: '60%',\r\n    display: 'grid',\r\n    gridTemplateColumns: '1fr 1fr',\r\n    gridTemplateRows: '50px 50px',\r\n    gridColumnGap: '40px',\r\n    gridRowGap: '30px',\r\n    margin: 'auto'\r\n};\r\n\r\nclass ControlPanel extends React.Component{\r\n    render(){\r\n        return <div style={panelStyle}>\r\n            <Editor id='session' gridRow='1' gridColumn='1' updateValue={this.props.updateSessionLength} value={this.props.sessionLength}></Editor>\r\n            <Editor id='break' gridRow='1' gridColumn='2' updateValue={this.props.updateBreakLength} value={this.props.breakLength}></Editor>\r\n            <ControlButton title={this.props.startButtonTitle} id='start_stop' click={this.props.startStopClick} gridRow='2' gridColumn='1'></ControlButton>\r\n            <ControlButton title='Reset' click={this.props.resetClick} id='reset' gridRow='2' gridColumn='2'></ControlButton>\r\n        </div>;\r\n    }\r\n}\r\n\r\n\r\n\r\nControlPanel.propTypes = {\r\n    resetClick: PropTypes.func.isRequired,\r\n    startStopClick: PropTypes.func.isRequired,\r\n    updateBreakLength: PropTypes.func.isRequired,\r\n    updateSessionLength: PropTypes.func.isRequired,\r\n    startButtonTitle: PropTypes.string.isRequired,\r\n    sessionLength: PropTypes.number.isRequired,\r\n    breakLength: PropTypes.number.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        startButtonTitle: (state.systemState === SystemStates.IDLE || state.systemState === SystemStates.SESSION_PAUSE || state.systemState === SystemStates.BREAK_PAUSE)\r\n                            ? 'Start' : 'Pause',\r\n        sessionLength: state.sessionLength,\r\n        breakLength: state.breakLength\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        resetClick: () => dispatch(resetAction),\r\n        startStopClick: () => dispatch(startStopClickedAction),\r\n        updateBreakLength: value => dispatch(updateBreakLengthAction(value)),\r\n        updateSessionLength: value => dispatch(updateSessionLengthAction(value))\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nimport * as SystemStates from '../const/systemStates';\r\n\r\nconst statusStyle = {\r\n    color: '#FFFFFF',\r\n    fontSize: '30px',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Arial',\r\n    margin: 'auto',\r\n    marginBottom: '20px',\r\n    textAlign: 'center' \r\n  };\r\n\r\nconst finalStatusStyle = {...statusStyle, color: '#FF0000'};\r\n\r\nclass TimerStatus extends React.Component{\r\n    render(){\r\n        return <div style={this.props.currentTime >= 60 ? statusStyle : finalStatusStyle} id='timer-label'>{this.props.label}</div>\r\n    }\r\n}\r\n\r\nTimerStatus.propTypes = {\r\n    currentTime: PropTypes.number.isRequired,\r\n    label: PropTypes.string.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        currentTime: state.currentTime,\r\n        label: (state.systemState === SystemStates.BREAK || state.systemState === SystemStates.BREAK_PAUSE) ? 'Break' : 'Session'\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(TimerStatus);","import React, { Component } from 'react';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport './App.css';\r\nimport {store} from './store';\r\nimport Timer from './components/Timer';\r\nimport ControlPanel from './components/ControlPanel';\r\nimport TimerStatus from './components/TimerStatus';\r\n\r\nconst headerStyle = {\r\n  color: '#AADDAA',\r\n  fontSize: '90px',\r\n  fontWeight: 'bold',\r\n  fontFamily: 'Arial',\r\n  margin: 'auto',\r\n  marginTop: '20%',\r\n  marginBottom: '20px',\r\n  textAlign: 'center' \r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div style={headerStyle}>Pomodoro Clock</div>\r\n        <Timer></Timer>\r\n        <TimerStatus></TimerStatus>\r\n        <ControlPanel></ControlPanel>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}